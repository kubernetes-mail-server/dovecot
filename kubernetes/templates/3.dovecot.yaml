apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
spec:
  serviceName: {{ .Values.name }}
  replicas: 1
  volumeClaimTemplates:
    - metadata:
        name: storage
        namespace: {{ .Values.namespace }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.server.storage }}
        selector:
          matchLabels:
            volume-name: {{ .Values.namespace }}-{{ .Values.name }}
  selector:
    matchLabels:
      app: {{ .Values.namespace }}
      role: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.namespace }}
        role: {{ .Values.name }}
    spec:
      nodeSelector:
        mail-server: "true"
      imagePullSecrets:
        - name: {{ .Values.name }}
      initContainers:
        - name: dhpem
          image: alpine:latest
          command:
            - sh
            - "-c"
            - apk --no-cache add openssl && echo 'Generating dh.pem' && openssl dhparam 2048 > /mnt/dh.pem
          volumeMounts:
            - name: dhpem
              mountPath: /mnt
      containers:
        - name: healthz
          image: k8s.gcr.io/exechealthz:1.0
          args: ["-cmd=nslookup {{ .Values.name }}.{{ .Values.namespace }}"]
          ports:
            - name: healthz
              containerPort: 8080
              protocol: TCP
        - name: {{ .Values.name }}
          image: {{ .Values.repository }}
          imagePullPolicy: Always
          readinessProbe:
            tcpSocket:
              port: 587
            initialDelaySeconds: 60
            periodSeconds: 60
          livenessProbe:
            tcpSocket:
              port: 587
            initialDelaySeconds: 60
            periodSeconds: 60
          envFrom:
            - configMapRef:
                name: general
            - configMapRef:
                name: services-info
            - configMapRef:
                name: database-common
            - configMapRef:
                name: database-read
            - configMapRef:
                name: dovecot-haproxy
            - configMapRef:
                name: dovecot-logging
          volumeMounts:
            - name: storage
              mountPath: /mail
            - name: dhpem
              mountPath: /etc/dh.pem
              subPath: dh.pem
            - name: tls-{{ .Values.name }}
              mountPath: /certs/
          ports:
            {{- range $name, $port := .Values.ports }}
            - name: {{ $name }}
              containerPort: {{ $port }}
              protocol: TCP
            {{- end }}
      volumes:
        - name: dhpem
          emptyDir: {}
        - name: tls-{{ .Values.name }}
          secret:
            secretName: tls-{{ .Values.name }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Values.namespace }}
    role: {{ .Values.name }}
  ports:
    {{- range $name, $port := .Values.ports }}
    - name: {{ $name }}
      port: {{ $port }}
      targetPort: {{ $port }}
      protocol: TCP
    {{- end }}